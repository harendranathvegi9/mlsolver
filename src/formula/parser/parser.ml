type token =
  | Ttt
  | Tff
  | TImplies
  | TInvImplies
  | TIff
  | TXor
  | TFormulaIdent of (string)
  | TArithmVar of (string)
  | TArithmIndex
  | TBeginDef
  | TEndDef
  | TDelim
  | TMatchWith
  | TMatchOption
  | TQuestionMark
  | TCondAnd
  | TCondOr
  | TCondNot
  | TCondEq
  | TCondUneq
  | TCondGreaterEq
  | TCondLessEq
  | TMu
  | TNu
  | TNext
  | TFinally
  | TGenerally
  | TProp of (string)
  | TVar of (string)
  | TBracketOpen
  | TBracketClose
  | TNeg
  | TAnd
  | TOr
  | TDiamondOpen
  | TStar
  | TDiamondClose
  | TBoxOpen
  | TBoxClose
  | TPoint
  | TArithmConst of (int)
  | TArithmSum
  | TArithmNeg
  | TArithmProd
  | TArithmDiv
  | TArithmMod
  | TEOL

open Parsing;;
# 1 "src/formula/parser/parser.mly"

open Metaformula;;

let parse_error s =
  print_endline "Parse error";
  print_endline s;
  flush stdout;;

# 61 "src/formula/parser/parser.ml"
let yytransl_const = [|
  257 (* Ttt *);
  258 (* Tff *);
  259 (* TImplies *);
  260 (* TInvImplies *);
  261 (* TIff *);
  262 (* TXor *);
  265 (* TArithmIndex *);
  266 (* TBeginDef *);
  267 (* TEndDef *);
  268 (* TDelim *);
  269 (* TMatchWith *);
  270 (* TMatchOption *);
  271 (* TQuestionMark *);
  272 (* TCondAnd *);
  273 (* TCondOr *);
  274 (* TCondNot *);
  275 (* TCondEq *);
  276 (* TCondUneq *);
  277 (* TCondGreaterEq *);
  278 (* TCondLessEq *);
  279 (* TMu *);
  280 (* TNu *);
  281 (* TNext *);
  282 (* TFinally *);
  283 (* TGenerally *);
  286 (* TBracketOpen *);
  287 (* TBracketClose *);
  288 (* TNeg *);
  289 (* TAnd *);
  290 (* TOr *);
  291 (* TDiamondOpen *);
  292 (* TStar *);
  293 (* TDiamondClose *);
  294 (* TBoxOpen *);
  295 (* TBoxClose *);
  296 (* TPoint *);
  298 (* TArithmSum *);
  299 (* TArithmNeg *);
  300 (* TArithmProd *);
  301 (* TArithmDiv *);
  302 (* TArithmMod *);
  303 (* TEOL *);
    0|]

let yytransl_block = [|
  263 (* TFormulaIdent *);
  264 (* TArithmVar *);
  284 (* TProp *);
  285 (* TVar *);
  297 (* TArithmConst *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\003\000\003\000\003\000\003\000\006\000\
\006\000\007\000\007\000\005\000\005\000\008\000\008\000\008\000\
\008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
\008\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
\004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
\004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
\004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
\004\000\010\000\010\000\011\000\011\000\009\000\009\000\009\000\
\009\000\009\000\009\000\009\000\009\000\009\000\000\000"

let yylen = "\002\000\
\002\000\001\000\002\000\004\000\004\000\007\000\007\000\001\000\
\003\000\001\000\001\000\004\000\005\000\003\000\001\000\001\000\
\003\000\003\000\002\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\002\000\001\000\001\000\004\000\004\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\003\000\003\000\003\000\004\000\
\006\000\004\000\006\000\003\000\001\000\003\000\001\000\001\000\
\004\000\001\000\003\000\001\000\001\000\003\000\001\000\003\000\
\002\000\003\000\003\000\003\000\003\000\001\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\071\000\000\000\000\000\000\000\000\000\
\001\000\003\000\034\000\035\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\010\000\011\000\000\000\000\000\000\000\
\015\000\016\000\070\000\000\000\000\000\063\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\004\000\043\000\000\000\000\000\000\000\000\000\
\044\000\000\000\005\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\019\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\026\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\009\000\000\000\057\000\000\000\014\000\062\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\059\000\013\000\000\000\000\000\
\006\000\007\000\000\000\000\000"

let yydgoto = "\002\000\
\004\000\005\000\006\000\051\000\027\000\030\000\031\000\040\000\
\041\000\073\000\074\000"

let yysindex = "\008\000\
\008\255\000\000\023\255\000\000\238\254\008\255\237\000\024\255\
\000\000\000\000\000\000\000\000\014\255\158\255\029\255\034\255\
\122\001\122\001\122\001\013\001\045\001\122\001\122\001\122\001\
\122\001\088\002\049\255\000\000\000\000\035\255\060\255\155\255\
\000\000\000\000\000\000\158\255\158\255\000\000\059\255\115\000\
\125\003\255\254\012\255\082\255\082\255\082\255\059\255\082\255\
\059\255\082\255\103\002\082\255\141\002\156\002\122\001\122\001\
\122\001\122\001\000\000\000\000\122\001\122\001\122\001\122\001\
\000\000\122\001\000\000\083\255\024\255\155\255\004\003\048\000\
\065\255\100\255\000\000\075\255\106\003\059\255\048\000\122\001\
\158\255\158\255\059\255\059\255\059\255\059\255\059\255\059\255\
\059\255\059\255\059\255\059\255\059\255\059\255\122\001\059\255\
\122\001\048\000\048\000\000\000\122\001\122\001\107\001\107\001\
\044\003\136\255\082\255\082\255\247\254\136\255\004\003\237\000\
\000\000\107\002\000\000\155\255\000\000\000\000\194\002\112\255\
\103\255\048\000\048\000\048\000\048\000\048\000\048\000\129\255\
\048\000\215\254\088\255\052\255\161\002\004\003\227\002\004\003\
\082\255\082\255\209\002\124\255\000\000\000\000\122\001\122\001\
\000\000\000\000\004\003\004\003"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\093\255\000\000\000\000\
\000\000\000\000\000\000\000\000\143\000\000\000\000\000\000\000\
\000\000\000\000\000\000\081\001\094\001\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\117\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\031\255\158\001\170\001\000\000\182\001\
\000\000\220\001\000\000\232\001\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\251\254\010\255\
\000\000\127\255\000\000\000\000\000\000\000\000\067\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\181\000\219\000\000\000\000\000\000\000\018\001\051\001\
\074\002\243\002\244\001\026\002\247\002\031\003\052\003\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\150\255\086\255\
\073\255\178\255\209\255\251\255\036\000\147\000\185\000\026\000\
\105\000\241\255\199\255\110\255\000\000\070\003\000\000\074\003\
\038\002\050\002\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\081\003\085\003"

let yygindex = "\000\000\
\000\000\161\000\000\000\249\255\245\255\099\000\000\000\221\255\
\247\255\061\000\000\000"

let yytablesize = 1195
let yytable = "\026\000\
\075\000\076\000\091\000\092\000\093\000\060\000\060\000\094\000\
\001\000\044\000\045\000\046\000\048\000\050\000\003\000\052\000\
\053\000\054\000\061\000\062\000\096\000\061\000\072\000\063\000\
\071\000\060\000\065\000\077\000\009\000\079\000\028\000\029\000\
\007\000\038\000\038\000\038\000\038\000\098\000\095\000\099\000\
\061\000\038\000\038\000\032\000\038\000\120\000\121\000\103\000\
\104\000\105\000\106\000\097\000\008\000\107\000\108\000\109\000\
\110\000\042\000\111\000\067\000\114\000\038\000\043\000\038\000\
\038\000\068\000\035\000\038\000\114\000\038\000\038\000\069\000\
\119\000\122\000\123\000\124\000\125\000\126\000\127\000\128\000\
\129\000\130\000\131\000\132\000\133\000\018\000\135\000\134\000\
\078\000\136\000\081\000\082\000\112\000\137\000\138\000\115\000\
\060\000\093\000\017\000\038\000\140\000\039\000\017\000\018\000\
\139\000\117\000\072\000\142\000\071\000\061\000\062\000\116\000\
\069\000\069\000\069\000\069\000\017\000\065\000\081\000\082\000\
\069\000\069\000\069\000\069\000\069\000\069\000\069\000\081\000\
\069\000\069\000\069\000\069\000\092\000\093\000\146\000\147\000\
\148\000\069\000\069\000\002\000\069\000\058\000\069\000\069\000\
\069\000\069\000\069\000\008\000\069\000\069\000\060\000\069\000\
\069\000\069\000\069\000\011\000\012\000\058\000\033\000\034\000\
\012\000\013\000\035\000\061\000\062\000\035\000\010\000\113\000\
\063\000\064\000\089\000\065\000\091\000\092\000\093\000\036\000\
\141\000\015\000\016\000\017\000\018\000\019\000\020\000\021\000\
\070\000\000\000\023\000\037\000\000\000\024\000\020\000\000\000\
\025\000\020\000\020\000\038\000\000\000\039\000\038\000\000\000\
\039\000\068\000\068\000\068\000\068\000\000\000\000\000\000\000\
\020\000\068\000\068\000\068\000\068\000\068\000\068\000\068\000\
\000\000\068\000\068\000\068\000\068\000\021\000\000\000\000\000\
\021\000\021\000\068\000\068\000\000\000\068\000\000\000\068\000\
\068\000\068\000\068\000\068\000\000\000\068\000\068\000\021\000\
\068\000\068\000\068\000\067\000\067\000\067\000\067\000\000\000\
\000\000\000\000\000\000\067\000\067\000\067\000\067\000\067\000\
\067\000\067\000\000\000\067\000\067\000\067\000\067\000\024\000\
\000\000\000\000\024\000\024\000\067\000\067\000\000\000\067\000\
\000\000\067\000\067\000\067\000\067\000\067\000\000\000\067\000\
\067\000\024\000\067\000\067\000\066\000\066\000\066\000\066\000\
\000\000\000\000\000\000\000\000\066\000\066\000\066\000\066\000\
\066\000\066\000\066\000\000\000\066\000\066\000\066\000\066\000\
\025\000\000\000\000\000\025\000\025\000\066\000\066\000\000\000\
\066\000\000\000\066\000\066\000\066\000\066\000\066\000\000\000\
\066\000\066\000\025\000\000\000\066\000\065\000\065\000\065\000\
\065\000\000\000\000\000\000\000\000\000\065\000\065\000\065\000\
\065\000\065\000\065\000\065\000\000\000\065\000\065\000\065\000\
\065\000\089\000\090\000\091\000\092\000\093\000\065\000\065\000\
\000\000\065\000\000\000\065\000\065\000\065\000\065\000\065\000\
\000\000\065\000\065\000\064\000\064\000\064\000\064\000\000\000\
\000\000\000\000\000\000\064\000\064\000\064\000\064\000\064\000\
\064\000\064\000\000\000\064\000\064\000\064\000\064\000\080\000\
\000\000\000\000\081\000\082\000\064\000\064\000\000\000\064\000\
\000\000\064\000\064\000\064\000\064\000\064\000\000\000\064\000\
\064\000\056\000\056\000\056\000\056\000\000\000\000\000\000\000\
\000\000\056\000\056\000\000\000\056\000\056\000\000\000\023\000\
\000\000\000\000\023\000\023\000\000\000\000\000\000\000\000\000\
\000\000\000\000\056\000\056\000\000\000\056\000\000\000\056\000\
\056\000\023\000\056\000\056\000\000\000\056\000\056\000\052\000\
\052\000\052\000\052\000\000\000\000\000\000\000\000\000\052\000\
\052\000\000\000\052\000\052\000\000\000\022\000\000\000\000\000\
\022\000\022\000\000\000\000\000\000\000\000\000\000\000\000\000\
\052\000\052\000\000\000\052\000\000\000\052\000\052\000\022\000\
\052\000\052\000\000\000\052\000\052\000\054\000\054\000\054\000\
\054\000\000\000\000\000\000\000\000\000\054\000\054\000\000\000\
\054\000\054\000\000\000\000\000\000\000\011\000\012\000\000\000\
\000\000\000\000\000\000\013\000\000\000\000\000\054\000\054\000\
\000\000\054\000\014\000\054\000\054\000\000\000\054\000\054\000\
\000\000\054\000\054\000\015\000\016\000\017\000\018\000\019\000\
\020\000\021\000\022\000\000\000\023\000\011\000\012\000\024\000\
\000\000\000\000\025\000\013\000\000\000\047\000\029\000\000\000\
\000\000\000\000\000\000\000\000\029\000\029\000\000\000\029\000\
\000\000\000\000\000\000\015\000\016\000\017\000\018\000\019\000\
\020\000\021\000\022\000\000\000\023\000\011\000\012\000\024\000\
\029\000\000\000\025\000\013\000\000\000\049\000\029\000\030\000\
\029\000\029\000\000\000\000\000\000\000\030\000\030\000\000\000\
\030\000\000\000\000\000\015\000\016\000\017\000\018\000\019\000\
\020\000\021\000\022\000\000\000\023\000\000\000\000\000\024\000\
\000\000\030\000\025\000\053\000\053\000\053\000\053\000\030\000\
\000\000\030\000\030\000\053\000\053\000\000\000\053\000\053\000\
\055\000\055\000\055\000\055\000\000\000\000\000\000\000\000\000\
\055\000\055\000\000\000\055\000\055\000\055\000\056\000\053\000\
\058\000\053\000\053\000\000\000\053\000\053\000\000\000\053\000\
\053\000\060\000\011\000\012\000\055\000\000\000\055\000\055\000\
\013\000\055\000\055\000\000\000\055\000\055\000\061\000\062\000\
\000\000\000\000\000\000\063\000\064\000\000\000\065\000\000\000\
\015\000\016\000\017\000\018\000\019\000\020\000\021\000\022\000\
\000\000\023\000\000\000\000\000\024\000\000\000\000\000\025\000\
\039\000\039\000\039\000\039\000\000\000\000\000\000\000\000\000\
\039\000\039\000\000\000\039\000\040\000\040\000\040\000\040\000\
\000\000\000\000\000\000\000\000\040\000\040\000\000\000\040\000\
\041\000\041\000\041\000\041\000\039\000\000\000\039\000\039\000\
\041\000\041\000\039\000\041\000\039\000\039\000\000\000\000\000\
\040\000\000\000\040\000\040\000\000\000\000\000\040\000\000\000\
\040\000\040\000\000\000\000\000\041\000\000\000\041\000\041\000\
\000\000\000\000\041\000\000\000\041\000\041\000\042\000\042\000\
\042\000\042\000\000\000\000\000\000\000\000\000\042\000\042\000\
\000\000\042\000\033\000\033\000\033\000\033\000\000\000\000\000\
\000\000\000\000\033\000\033\000\000\000\033\000\046\000\046\000\
\046\000\046\000\042\000\000\000\042\000\042\000\046\000\046\000\
\042\000\046\000\042\000\042\000\000\000\000\000\033\000\000\000\
\033\000\033\000\000\000\000\000\033\000\000\000\033\000\033\000\
\000\000\000\000\046\000\000\000\046\000\046\000\000\000\000\000\
\046\000\000\000\046\000\046\000\047\000\047\000\047\000\047\000\
\000\000\000\000\000\000\000\000\047\000\047\000\000\000\047\000\
\036\000\036\000\036\000\036\000\000\000\000\000\000\000\000\000\
\036\000\036\000\000\000\036\000\037\000\037\000\037\000\037\000\
\047\000\000\000\047\000\047\000\037\000\037\000\047\000\037\000\
\047\000\047\000\000\000\000\000\036\000\000\000\036\000\036\000\
\000\000\000\000\036\000\000\000\036\000\036\000\000\000\000\000\
\037\000\000\000\037\000\037\000\031\000\031\000\037\000\031\000\
\037\000\037\000\055\000\056\000\057\000\058\000\000\000\000\000\
\000\000\000\000\059\000\000\000\000\000\000\000\060\000\000\000\
\031\000\055\000\056\000\057\000\058\000\000\000\031\000\000\000\
\031\000\031\000\000\000\061\000\062\000\060\000\000\000\000\000\
\063\000\064\000\000\000\065\000\000\000\000\000\000\000\066\000\
\000\000\000\000\061\000\062\000\000\000\100\000\000\000\063\000\
\064\000\118\000\065\000\000\000\000\000\000\000\066\000\055\000\
\056\000\057\000\058\000\000\000\089\000\090\000\091\000\092\000\
\093\000\000\000\000\000\060\000\000\000\000\000\055\000\056\000\
\057\000\058\000\000\000\000\000\000\000\000\000\000\000\000\000\
\061\000\062\000\060\000\000\000\000\000\063\000\064\000\000\000\
\065\000\101\000\000\000\000\000\066\000\000\000\000\000\061\000\
\062\000\000\000\000\000\000\000\063\000\064\000\000\000\065\000\
\000\000\000\000\102\000\066\000\055\000\056\000\057\000\058\000\
\143\000\000\000\089\000\090\000\091\000\092\000\093\000\014\000\
\060\000\000\000\000\000\055\000\056\000\057\000\058\000\000\000\
\000\000\000\000\000\000\145\000\000\000\061\000\062\000\060\000\
\000\000\000\000\063\000\064\000\000\000\065\000\000\000\000\000\
\000\000\066\000\000\000\000\000\061\000\062\000\000\000\000\000\
\000\000\063\000\064\000\000\000\065\000\032\000\032\000\032\000\
\066\000\027\000\027\000\027\000\027\000\032\000\032\000\000\000\
\032\000\027\000\027\000\000\000\027\000\000\000\055\000\056\000\
\057\000\058\000\144\000\000\000\089\000\090\000\091\000\092\000\
\093\000\032\000\060\000\000\000\000\000\027\000\000\000\032\000\
\027\000\032\000\032\000\027\000\000\000\027\000\027\000\061\000\
\062\000\028\000\028\000\028\000\063\000\064\000\000\000\065\000\
\000\000\028\000\028\000\066\000\028\000\000\000\055\000\056\000\
\057\000\058\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\060\000\000\000\000\000\028\000\045\000\045\000\
\000\000\045\000\000\000\028\000\000\000\028\000\028\000\061\000\
\062\000\000\000\000\000\000\000\063\000\064\000\000\000\065\000\
\048\000\048\000\045\000\048\000\050\000\050\000\000\000\050\000\
\045\000\000\000\045\000\049\000\049\000\000\000\049\000\051\000\
\051\000\000\000\051\000\000\000\048\000\000\000\000\000\000\000\
\050\000\000\000\048\000\000\000\048\000\000\000\050\000\049\000\
\050\000\000\000\000\000\051\000\000\000\049\000\000\000\049\000\
\000\000\051\000\000\000\051\000\083\000\084\000\085\000\086\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\118\000\000\000\000\000\000\000\087\000\000\000\088\000\083\000\
\084\000\085\000\086\000\089\000\090\000\091\000\092\000\093\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\087\000\
\000\000\088\000\000\000\000\000\000\000\000\000\089\000\090\000\
\091\000\092\000\093\000"

let yycheck = "\007\000\
\036\000\037\000\044\001\045\001\046\001\015\001\012\001\009\001\
\001\000\017\000\018\000\019\000\020\000\021\000\007\001\023\000\
\024\000\025\000\028\001\029\001\009\001\012\001\032\000\033\001\
\032\000\031\001\036\001\037\000\047\001\039\000\007\001\008\001\
\010\001\003\001\004\001\005\001\006\001\047\000\040\001\049\000\
\031\001\011\001\012\001\030\001\014\001\081\000\082\000\055\000\
\056\000\057\000\058\000\040\001\030\001\061\000\062\000\063\000\
\064\000\029\001\066\000\011\001\070\000\031\001\029\001\033\001\
\034\001\031\001\008\001\037\001\078\000\039\001\040\001\012\001\
\080\000\083\000\084\000\085\000\086\000\087\000\088\000\089\000\
\090\000\091\000\092\000\093\000\094\000\013\001\096\000\095\000\
\030\001\097\000\016\001\017\001\010\001\101\000\102\000\031\001\
\015\001\046\001\013\001\041\001\112\000\043\001\017\001\031\001\
\112\000\031\001\116\000\119\000\116\000\028\001\029\001\012\001\
\003\001\004\001\005\001\006\001\031\001\036\001\016\001\017\001\
\011\001\012\001\013\001\014\001\015\001\016\001\017\001\016\001\
\019\001\020\001\021\001\022\001\045\001\046\001\011\001\143\000\
\144\000\028\001\029\001\047\001\031\001\006\001\033\001\034\001\
\035\001\036\001\037\001\031\001\039\001\040\001\015\001\042\001\
\043\001\044\001\045\001\001\001\002\001\031\001\001\001\002\001\
\011\001\007\001\008\001\028\001\029\001\008\001\006\000\069\000\
\033\001\034\001\042\001\036\001\044\001\045\001\046\001\018\001\
\116\000\023\001\024\001\025\001\026\001\027\001\028\001\029\001\
\030\001\255\255\032\001\030\001\255\255\035\001\013\001\255\255\
\038\001\016\001\017\001\041\001\255\255\043\001\041\001\255\255\
\043\001\003\001\004\001\005\001\006\001\255\255\255\255\255\255\
\031\001\011\001\012\001\013\001\014\001\015\001\016\001\017\001\
\255\255\019\001\020\001\021\001\022\001\013\001\255\255\255\255\
\016\001\017\001\028\001\029\001\255\255\031\001\255\255\033\001\
\034\001\035\001\036\001\037\001\255\255\039\001\040\001\031\001\
\042\001\043\001\044\001\003\001\004\001\005\001\006\001\255\255\
\255\255\255\255\255\255\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\255\255\019\001\020\001\021\001\022\001\013\001\
\255\255\255\255\016\001\017\001\028\001\029\001\255\255\031\001\
\255\255\033\001\034\001\035\001\036\001\037\001\255\255\039\001\
\040\001\031\001\042\001\043\001\003\001\004\001\005\001\006\001\
\255\255\255\255\255\255\255\255\011\001\012\001\013\001\014\001\
\015\001\016\001\017\001\255\255\019\001\020\001\021\001\022\001\
\013\001\255\255\255\255\016\001\017\001\028\001\029\001\255\255\
\031\001\255\255\033\001\034\001\035\001\036\001\037\001\255\255\
\039\001\040\001\031\001\255\255\043\001\003\001\004\001\005\001\
\006\001\255\255\255\255\255\255\255\255\011\001\012\001\013\001\
\014\001\015\001\016\001\017\001\255\255\019\001\020\001\021\001\
\022\001\042\001\043\001\044\001\045\001\046\001\028\001\029\001\
\255\255\031\001\255\255\033\001\034\001\035\001\036\001\037\001\
\255\255\039\001\040\001\003\001\004\001\005\001\006\001\255\255\
\255\255\255\255\255\255\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\255\255\019\001\020\001\021\001\022\001\013\001\
\255\255\255\255\016\001\017\001\028\001\029\001\255\255\031\001\
\255\255\033\001\034\001\035\001\036\001\037\001\255\255\039\001\
\040\001\003\001\004\001\005\001\006\001\255\255\255\255\255\255\
\255\255\011\001\012\001\255\255\014\001\015\001\255\255\013\001\
\255\255\255\255\016\001\017\001\255\255\255\255\255\255\255\255\
\255\255\255\255\028\001\029\001\255\255\031\001\255\255\033\001\
\034\001\031\001\036\001\037\001\255\255\039\001\040\001\003\001\
\004\001\005\001\006\001\255\255\255\255\255\255\255\255\011\001\
\012\001\255\255\014\001\015\001\255\255\013\001\255\255\255\255\
\016\001\017\001\255\255\255\255\255\255\255\255\255\255\255\255\
\028\001\029\001\255\255\031\001\255\255\033\001\034\001\031\001\
\036\001\037\001\255\255\039\001\040\001\003\001\004\001\005\001\
\006\001\255\255\255\255\255\255\255\255\011\001\012\001\255\255\
\014\001\015\001\255\255\255\255\255\255\001\001\002\001\255\255\
\255\255\255\255\255\255\007\001\255\255\255\255\028\001\029\001\
\255\255\031\001\014\001\033\001\034\001\255\255\036\001\037\001\
\255\255\039\001\040\001\023\001\024\001\025\001\026\001\027\001\
\028\001\029\001\030\001\255\255\032\001\001\001\002\001\035\001\
\255\255\255\255\038\001\007\001\255\255\009\001\005\001\255\255\
\255\255\255\255\255\255\255\255\011\001\012\001\255\255\014\001\
\255\255\255\255\255\255\023\001\024\001\025\001\026\001\027\001\
\028\001\029\001\030\001\255\255\032\001\001\001\002\001\035\001\
\031\001\255\255\038\001\007\001\255\255\009\001\037\001\005\001\
\039\001\040\001\255\255\255\255\255\255\011\001\012\001\255\255\
\014\001\255\255\255\255\023\001\024\001\025\001\026\001\027\001\
\028\001\029\001\030\001\255\255\032\001\255\255\255\255\035\001\
\255\255\031\001\038\001\003\001\004\001\005\001\006\001\037\001\
\255\255\039\001\040\001\011\001\012\001\255\255\014\001\015\001\
\003\001\004\001\005\001\006\001\255\255\255\255\255\255\255\255\
\011\001\012\001\255\255\014\001\015\001\003\001\004\001\031\001\
\006\001\033\001\034\001\255\255\036\001\037\001\255\255\039\001\
\040\001\015\001\001\001\002\001\031\001\255\255\033\001\034\001\
\007\001\036\001\037\001\255\255\039\001\040\001\028\001\029\001\
\255\255\255\255\255\255\033\001\034\001\255\255\036\001\255\255\
\023\001\024\001\025\001\026\001\027\001\028\001\029\001\030\001\
\255\255\032\001\255\255\255\255\035\001\255\255\255\255\038\001\
\003\001\004\001\005\001\006\001\255\255\255\255\255\255\255\255\
\011\001\012\001\255\255\014\001\003\001\004\001\005\001\006\001\
\255\255\255\255\255\255\255\255\011\001\012\001\255\255\014\001\
\003\001\004\001\005\001\006\001\031\001\255\255\033\001\034\001\
\011\001\012\001\037\001\014\001\039\001\040\001\255\255\255\255\
\031\001\255\255\033\001\034\001\255\255\255\255\037\001\255\255\
\039\001\040\001\255\255\255\255\031\001\255\255\033\001\034\001\
\255\255\255\255\037\001\255\255\039\001\040\001\003\001\004\001\
\005\001\006\001\255\255\255\255\255\255\255\255\011\001\012\001\
\255\255\014\001\003\001\004\001\005\001\006\001\255\255\255\255\
\255\255\255\255\011\001\012\001\255\255\014\001\003\001\004\001\
\005\001\006\001\031\001\255\255\033\001\034\001\011\001\012\001\
\037\001\014\001\039\001\040\001\255\255\255\255\031\001\255\255\
\033\001\034\001\255\255\255\255\037\001\255\255\039\001\040\001\
\255\255\255\255\031\001\255\255\033\001\034\001\255\255\255\255\
\037\001\255\255\039\001\040\001\003\001\004\001\005\001\006\001\
\255\255\255\255\255\255\255\255\011\001\012\001\255\255\014\001\
\003\001\004\001\005\001\006\001\255\255\255\255\255\255\255\255\
\011\001\012\001\255\255\014\001\003\001\004\001\005\001\006\001\
\031\001\255\255\033\001\034\001\011\001\012\001\037\001\014\001\
\039\001\040\001\255\255\255\255\031\001\255\255\033\001\034\001\
\255\255\255\255\037\001\255\255\039\001\040\001\255\255\255\255\
\031\001\255\255\033\001\034\001\011\001\012\001\037\001\014\001\
\039\001\040\001\003\001\004\001\005\001\006\001\255\255\255\255\
\255\255\255\255\011\001\255\255\255\255\255\255\015\001\255\255\
\031\001\003\001\004\001\005\001\006\001\255\255\037\001\255\255\
\039\001\040\001\255\255\028\001\029\001\015\001\255\255\255\255\
\033\001\034\001\255\255\036\001\255\255\255\255\255\255\040\001\
\255\255\255\255\028\001\029\001\255\255\031\001\255\255\033\001\
\034\001\031\001\036\001\255\255\255\255\255\255\040\001\003\001\
\004\001\005\001\006\001\255\255\042\001\043\001\044\001\045\001\
\046\001\255\255\255\255\015\001\255\255\255\255\003\001\004\001\
\005\001\006\001\255\255\255\255\255\255\255\255\255\255\255\255\
\028\001\029\001\015\001\255\255\255\255\033\001\034\001\255\255\
\036\001\037\001\255\255\255\255\040\001\255\255\255\255\028\001\
\029\001\255\255\255\255\255\255\033\001\034\001\255\255\036\001\
\255\255\255\255\039\001\040\001\003\001\004\001\005\001\006\001\
\040\001\255\255\042\001\043\001\044\001\045\001\046\001\014\001\
\015\001\255\255\255\255\003\001\004\001\005\001\006\001\255\255\
\255\255\255\255\255\255\011\001\255\255\028\001\029\001\015\001\
\255\255\255\255\033\001\034\001\255\255\036\001\255\255\255\255\
\255\255\040\001\255\255\255\255\028\001\029\001\255\255\255\255\
\255\255\033\001\034\001\255\255\036\001\003\001\004\001\005\001\
\040\001\003\001\004\001\005\001\006\001\011\001\012\001\255\255\
\014\001\011\001\012\001\255\255\014\001\255\255\003\001\004\001\
\005\001\006\001\040\001\255\255\042\001\043\001\044\001\045\001\
\046\001\031\001\015\001\255\255\255\255\031\001\255\255\037\001\
\034\001\039\001\040\001\037\001\255\255\039\001\040\001\028\001\
\029\001\003\001\004\001\005\001\033\001\034\001\255\255\036\001\
\255\255\011\001\012\001\040\001\014\001\255\255\003\001\004\001\
\005\001\006\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\015\001\255\255\255\255\031\001\011\001\012\001\
\255\255\014\001\255\255\037\001\255\255\039\001\040\001\028\001\
\029\001\255\255\255\255\255\255\033\001\034\001\255\255\036\001\
\011\001\012\001\031\001\014\001\011\001\012\001\255\255\014\001\
\037\001\255\255\039\001\011\001\012\001\255\255\014\001\011\001\
\012\001\255\255\014\001\255\255\031\001\255\255\255\255\255\255\
\031\001\255\255\037\001\255\255\039\001\255\255\037\001\031\001\
\039\001\255\255\255\255\031\001\255\255\037\001\255\255\039\001\
\255\255\037\001\255\255\039\001\019\001\020\001\021\001\022\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\031\001\255\255\255\255\255\255\035\001\255\255\037\001\019\001\
\020\001\021\001\022\001\042\001\043\001\044\001\045\001\046\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\035\001\
\255\255\037\001\255\255\255\255\255\255\255\255\042\001\043\001\
\044\001\045\001\046\001"

let yynames_const = "\
  Ttt\000\
  Tff\000\
  TImplies\000\
  TInvImplies\000\
  TIff\000\
  TXor\000\
  TArithmIndex\000\
  TBeginDef\000\
  TEndDef\000\
  TDelim\000\
  TMatchWith\000\
  TMatchOption\000\
  TQuestionMark\000\
  TCondAnd\000\
  TCondOr\000\
  TCondNot\000\
  TCondEq\000\
  TCondUneq\000\
  TCondGreaterEq\000\
  TCondLessEq\000\
  TMu\000\
  TNu\000\
  TNext\000\
  TFinally\000\
  TGenerally\000\
  TBracketOpen\000\
  TBracketClose\000\
  TNeg\000\
  TAnd\000\
  TOr\000\
  TDiamondOpen\000\
  TStar\000\
  TDiamondClose\000\
  TBoxOpen\000\
  TBoxClose\000\
  TPoint\000\
  TArithmSum\000\
  TArithmNeg\000\
  TArithmProd\000\
  TArithmDiv\000\
  TArithmMod\000\
  TEOL\000\
  "

let yynames_block = "\
  TFormulaIdent\000\
  TArithmVar\000\
  TProp\000\
  TVar\000\
  TArithmConst\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'nprogram) in
    Obj.repr(
# 88 "src/formula/parser/parser.mly"
                (_1)
# 573 "src/formula/parser/parser.ml"
               : Metaformula.environment))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'definition) in
    Obj.repr(
# 92 "src/formula/parser/parser.mly"
             ([_1])
# 580 "src/formula/parser/parser.ml"
               : 'nprogram))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'definition) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'nprogram) in
    Obj.repr(
# 93 "src/formula/parser/parser.mly"
                      (_1::_2)
# 588 "src/formula/parser/parser.ml"
               : 'nprogram))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    Obj.repr(
# 97 "src/formula/parser/parser.mly"
                                             ((_1, [], [(CondTT, _3)]))
# 596 "src/formula/parser/parser.ml"
               : 'definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'ncondexpression) in
    Obj.repr(
# 98 "src/formula/parser/parser.mly"
                                                  ((_1, [], _3))
# 604 "src/formula/parser/parser.ml"
               : 'definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'nformalparam) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    Obj.repr(
# 99 "src/formula/parser/parser.mly"
                                                                                     ((_1, _3, [(CondTT, _6)]))
# 613 "src/formula/parser/parser.ml"
               : 'definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'nformalparam) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'ncondexpression) in
    Obj.repr(
# 100 "src/formula/parser/parser.mly"
                                                                                          ((_1, _3, _6))
# 622 "src/formula/parser/parser.ml"
               : 'definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'formalparam) in
    Obj.repr(
# 104 "src/formula/parser/parser.mly"
              ([_1])
# 629 "src/formula/parser/parser.ml"
               : 'nformalparam))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'formalparam) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'nformalparam) in
    Obj.repr(
# 105 "src/formula/parser/parser.mly"
                                  (_1::_3)
# 637 "src/formula/parser/parser.ml"
               : 'nformalparam))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 109 "src/formula/parser/parser.mly"
                (PFormulaVar _1)
# 644 "src/formula/parser/parser.ml"
               : 'formalparam))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 110 "src/formula/parser/parser.mly"
             (PArithmVar _1)
# 651 "src/formula/parser/parser.ml"
               : 'formalparam))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'condition) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 114 "src/formula/parser/parser.mly"
                                               ([(_2, _4)])
# 659 "src/formula/parser/parser.ml"
               : 'ncondexpression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'condition) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'ncondexpression) in
    Obj.repr(
# 115 "src/formula/parser/parser.mly"
                                                               ((_2, _4) :: _5)
# 668 "src/formula/parser/parser.ml"
               : 'ncondexpression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'condition) in
    Obj.repr(
# 118 "src/formula/parser/parser.mly"
                                       (_2)
# 675 "src/formula/parser/parser.ml"
               : 'condition))
; (fun __caml_parser_env ->
    Obj.repr(
# 119 "src/formula/parser/parser.mly"
      (CondTT)
# 681 "src/formula/parser/parser.ml"
               : 'condition))
; (fun __caml_parser_env ->
    Obj.repr(
# 120 "src/formula/parser/parser.mly"
      (CondFF)
# 687 "src/formula/parser/parser.ml"
               : 'condition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'condition) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'condition) in
    Obj.repr(
# 121 "src/formula/parser/parser.mly"
                               (CondAnd(_1, _3))
# 695 "src/formula/parser/parser.ml"
               : 'condition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'condition) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'condition) in
    Obj.repr(
# 122 "src/formula/parser/parser.mly"
                              (CondOr(_1, _3))
# 703 "src/formula/parser/parser.ml"
               : 'condition))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'condition) in
    Obj.repr(
# 123 "src/formula/parser/parser.mly"
                     (CondNot _2)
# 710 "src/formula/parser/parser.ml"
               : 'condition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'arithmexpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'arithmexpr) in
    Obj.repr(
# 124 "src/formula/parser/parser.mly"
                                (CondEq(_1, _3))
# 718 "src/formula/parser/parser.ml"
               : 'condition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'arithmexpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'arithmexpr) in
    Obj.repr(
# 125 "src/formula/parser/parser.mly"
                                  (CondNot(CondEq(_1, _3)))
# 726 "src/formula/parser/parser.ml"
               : 'condition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'arithmexpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'arithmexpr) in
    Obj.repr(
# 126 "src/formula/parser/parser.mly"
                                      (CondGreater(_1, _3))
# 734 "src/formula/parser/parser.ml"
               : 'condition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'arithmexpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'arithmexpr) in
    Obj.repr(
# 127 "src/formula/parser/parser.mly"
                                     (CondGreater(_3, _1))
# 742 "src/formula/parser/parser.ml"
               : 'condition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'arithmexpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'arithmexpr) in
    Obj.repr(
# 128 "src/formula/parser/parser.mly"
                                       (CondOr(CondGreater(_1, _3), CondEq(_1, _3)))
# 750 "src/formula/parser/parser.ml"
               : 'condition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'arithmexpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'arithmexpr) in
    Obj.repr(
# 129 "src/formula/parser/parser.mly"
                                    (CondOr(CondGreater(_3, _1), CondEq(_3, _1)))
# 758 "src/formula/parser/parser.ml"
               : 'condition))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    Obj.repr(
# 133 "src/formula/parser/parser.mly"
                                        (_2)
# 765 "src/formula/parser/parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 134 "src/formula/parser/parser.mly"
                             (FAnd (_1, _3))
# 773 "src/formula/parser/parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 135 "src/formula/parser/parser.mly"
                            (FOr (_1, _3))
# 781 "src/formula/parser/parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 136 "src/formula/parser/parser.mly"
                                 (FOr (FNeg (_1), _3))
# 789 "src/formula/parser/parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 137 "src/formula/parser/parser.mly"
                                    (FOr (_1, FNeg (_3)))
# 797 "src/formula/parser/parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 138 "src/formula/parser/parser.mly"
                             (FOr(FAnd (_1, _3), FAnd (FNeg (_1), FNeg (_3))))
# 805 "src/formula/parser/parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 139 "src/formula/parser/parser.mly"
                             (FOr(FAnd (_1, FNeg (_3)), FAnd (FNeg (_1), _3)))
# 813 "src/formula/parser/parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 140 "src/formula/parser/parser.mly"
                  (FNeg (_2))
# 820 "src/formula/parser/parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    Obj.repr(
# 141 "src/formula/parser/parser.mly"
      (Ftt)
# 826 "src/formula/parser/parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    Obj.repr(
# 142 "src/formula/parser/parser.mly"
      (Fff)
# 832 "src/formula/parser/parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 143 "src/formula/parser/parser.mly"
                                                   (FLabelledOp ("<>", _2, _4))
# 840 "src/formula/parser/parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 144 "src/formula/parser/parser.mly"
                                           (FLabelledOp ("[]", _2, _4))
# 848 "src/formula/parser/parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 145 "src/formula/parser/parser.mly"
                   (FUnaryOp ("()", _2))
# 855 "src/formula/parser/parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 146 "src/formula/parser/parser.mly"
                      (FUnaryOp ("<>", _2))
# 862 "src/formula/parser/parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 147 "src/formula/parser/parser.mly"
                        (FUnaryOp ("[]", _2))
# 869 "src/formula/parser/parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 148 "src/formula/parser/parser.mly"
                   (FUnaryOp (_1, _2))
# 877 "src/formula/parser/parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 149 "src/formula/parser/parser.mly"
                  (FUnaryOp (_1, _2))
# 885 "src/formula/parser/parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    Obj.repr(
# 150 "src/formula/parser/parser.mly"
                           (FUnaryOp ("?", _1))
# 892 "src/formula/parser/parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    Obj.repr(
# 151 "src/formula/parser/parser.mly"
                   (FUnaryOp ("*", _1))
# 899 "src/formula/parser/parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 152 "src/formula/parser/parser.mly"
                               (FBinaryOp(".", _1, _3))
# 907 "src/formula/parser/parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 153 "src/formula/parser/parser.mly"
                              (FBinaryOp(_2, _1, _3))
# 916 "src/formula/parser/parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 154 "src/formula/parser/parser.mly"
                             (FBinaryOp(_2, _1, _3))
# 925 "src/formula/parser/parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 155 "src/formula/parser/parser.mly"
                             (FQuantor ("mu", IDefault _2, _4))
# 933 "src/formula/parser/parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'arithmexpr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 156 "src/formula/parser/parser.mly"
                                                     (FQuantor ("mu", IIndexed(_2, _4), _6))
# 942 "src/formula/parser/parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 157 "src/formula/parser/parser.mly"
                             (FQuantor ("nu", IDefault _2, _4))
# 950 "src/formula/parser/parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'arithmexpr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 158 "src/formula/parser/parser.mly"
                                                     (FQuantor ("nu", IIndexed(_2, _4), _6))
# 959 "src/formula/parser/parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'arithmexpr) in
    Obj.repr(
# 159 "src/formula/parser/parser.mly"
                                (FProp (IIndexed (_1, _3)))
# 967 "src/formula/parser/parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 160 "src/formula/parser/parser.mly"
        (FProp (IDefault _1))
# 974 "src/formula/parser/parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'arithmexpr) in
    Obj.repr(
# 161 "src/formula/parser/parser.mly"
                               (FVariable (IIndexed (_1, _3)))
# 982 "src/formula/parser/parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 162 "src/formula/parser/parser.mly"
       (FVariable (IDefault _1))
# 989 "src/formula/parser/parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 163 "src/formula/parser/parser.mly"
                (FFormulaIdent (_1, []))
# 996 "src/formula/parser/parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'nactualparam) in
    Obj.repr(
# 164 "src/formula/parser/parser.mly"
                                                        (FFormulaIdent (_1, _3))
# 1004 "src/formula/parser/parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'actualparam) in
    Obj.repr(
# 168 "src/formula/parser/parser.mly"
              ([_1])
# 1011 "src/formula/parser/parser.ml"
               : 'nactualparam))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'actualparam) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'nactualparam) in
    Obj.repr(
# 169 "src/formula/parser/parser.mly"
                                  (_1::_3)
# 1019 "src/formula/parser/parser.ml"
               : 'nactualparam))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 173 "src/formula/parser/parser.mly"
             (PFormula _1)
# 1026 "src/formula/parser/parser.ml"
               : 'actualparam))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'arithmexpr) in
    Obj.repr(
# 174 "src/formula/parser/parser.mly"
             (PArithmExpr _1)
# 1033 "src/formula/parser/parser.ml"
               : 'actualparam))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'arithmexpr) in
    Obj.repr(
# 178 "src/formula/parser/parser.mly"
                                        (_2)
# 1040 "src/formula/parser/parser.ml"
               : 'arithmexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 179 "src/formula/parser/parser.mly"
               (AConst _1)
# 1047 "src/formula/parser/parser.ml"
               : 'arithmexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'arithmexpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'arithmexpr) in
    Obj.repr(
# 180 "src/formula/parser/parser.mly"
                                   (ASum(_1, ANeg _3))
# 1055 "src/formula/parser/parser.ml"
               : 'arithmexpr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'arithmexpr) in
    Obj.repr(
# 181 "src/formula/parser/parser.mly"
                        (ANeg _2)
# 1062 "src/formula/parser/parser.ml"
               : 'arithmexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'arithmexpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'arithmexpr) in
    Obj.repr(
# 182 "src/formula/parser/parser.mly"
                                   (ASum(_1, _3))
# 1070 "src/formula/parser/parser.ml"
               : 'arithmexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'arithmexpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'arithmexpr) in
    Obj.repr(
# 183 "src/formula/parser/parser.mly"
                                    (AProd(_1, _3))
# 1078 "src/formula/parser/parser.ml"
               : 'arithmexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'arithmexpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'arithmexpr) in
    Obj.repr(
# 184 "src/formula/parser/parser.mly"
                                   (ADiv(_1, _3))
# 1086 "src/formula/parser/parser.ml"
               : 'arithmexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'arithmexpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'arithmexpr) in
    Obj.repr(
# 185 "src/formula/parser/parser.mly"
                                   (AMod(_1, _3))
# 1094 "src/formula/parser/parser.ml"
               : 'arithmexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 186 "src/formula/parser/parser.mly"
             (AArithmVar _1)
# 1101 "src/formula/parser/parser.ml"
               : 'arithmexpr))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Metaformula.environment)
;;
